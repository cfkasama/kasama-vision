// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PostType {
  CATCHPHRASE
  VISION
  CONSULTATION
  PROPOSAL
  REPORT_LIVE
  REPORT_WORK
  REPORT_TOURISM
}

enum PostStatus {
  PUBLISHED
  REMOVED
  REALIZED
}

enum ReactionType {
  LIKE
  RECOMMEND
}

enum ReportStatus {
  OPEN
  RESOLVED
  DISMISSED
}

model Identity {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  reactions    Reaction[]
  comments     Comment[]
  abuseReports AbuseReport[]
}

model Post {
  id               String      @id @default(cuid())
  type             PostType
  status           PostStatus  @default(PUBLISHED)
  title            String
  content          String?     @db.Text
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  likeCount        Int         @default(0)
  recCount         Int         @default(0)
  cmtCount         Int         @default(0)
  hotScore         Float       @default(0)

  deleteKey        String?
  lowExposureActive Boolean    @default(false)
  lowExposureAt    DateTime?
  tempHiddenActive Boolean     @default(false)
  tempHiddenAt     DateTime?
  realizedAt       DateTime?

  reactions        Reaction[]
  comments         Comment[]
  tags             PostTag[]
abuseReports     AbuseReport[]
}

model Reaction {
  id         String       @id @default(cuid())
  type       ReactionType
  createdAt  DateTime     @default(now())

  postId     String
  post       Post         @relation(fields: [postId], references: [id])

  identityId String?
  identity   Identity?    @relation(fields: [identityId], references: [id])

  @@unique([postId, identityId, type])
}

model Comment {
  id         String     @id @default(cuid())
  content    String     @db.Text
  likeCount  Int        @default(0)
  createdAt  DateTime   @default(now())

  postId     String
  post       Post       @relation(fields: [postId], references: [id])

  identityId String?
  identity   Identity?  @relation(fields: [identityId], references: [id])
}

model AbuseReport {
  id         String       @id @default(cuid())
  reason     String?
  status     ReportStatus @default(OPEN)
  createdAt  DateTime     @default(now())
  resolvedAt DateTime?
  resolver   String?
  note       String?

  postId     String
  post       Post         @relation(fields: [postId], references: [id])

  identityId String?
  identity   Identity?    @relation(fields: [identityId], references: [id])
}

model Tag {
  id    String    @id @default(cuid())
  name  String    @unique
  posts PostTag[]
}

model PostTag {
  postId String
  tagId  String

  post   Post @relation(fields: [postId], references: [id])
  tag    Tag  @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

model TagTop5 {
  id        String   @id @default(cuid())
  tagId     String
  tagName   String
  count     Int      @default(0)
  updatedAt DateTime @default(now())
}